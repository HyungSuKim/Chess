package com.bfpaul.chess.board;

import java.awt.Component;
import java.awt.GridLayout;
import java.util.ArrayList;

import javax.swing.BorderFactory;

import com.bfpaul.chess.Theme;
import com.bfpaul.chess.chessman.Chessman;
import com.bfpaul.chess.chessman.ChessmanType;
import com.bfpaul.chess.chessman.pawn.Pawn;
import com.mommoo.flat.component.FlatPanel;
import com.mommoo.flat.component.OnClickListener;
import com.mommoo.flat.layout.linear.LinearLayout;
import com.mommoo.flat.layout.linear.constraints.LinearConstraints;
import com.mommoo.flat.layout.linear.constraints.LinearSpace;

// x축 y축 8칸의 square을 가진 Board의 생성 및 Board위에서 일어나는 이벤트들(체스말을 놓아준다던가 체스말이 죽어서 제거한다던가 체스말의 이동가능범위를 보여준다던가...)을
// 처리하는 역할을 할 것이다.
@SuppressWarnings("serial")
public class BoardPanel extends FlatPanel {
//	체스 판의 하나하나의 square로써 체스말을 놓아준다던가 체스말을 제외해준다거나 이동가능범위를 표현해줄 최소단위의 칸이다. 
	private BoardSquare[][] boardSquare = new BoardSquare[8][8];
	private BoardSquare tempSquare = null;
	boolean once = true;
	
// 8 X 8의 square를 가진 체스판을 만들어준다.
	public BoardPanel() { 
		setLayout(new GridLayout(8, 8));
		setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
		setBackground(Theme.BOARD_BORDER_COLOR);
		setOpaque(true);
		
		for(int y = 8; y > 0; y--) {
			for(int x = 0; x < 8; x++) {
				add(createBoardSquare(x, (y-1)), createMatchParentConstraints(1));
			}
		}
		
		setWholeChessmanOnBoard();
	}
	
//	입력된 무게와 부모의 크기만큼 영역을 차지하는 제약조건을 생성하여 반환한다.  
	private LinearConstraints createMatchParentConstraints(int weight) {
		return new LinearConstraints().setWeight(weight).setLinearSpace(LinearSpace.MATCH_PARENT);
	}
	
//	정해진 좌표의 하나의 칸을 생성해서 하나의 square가 배열로써 저장되어 좌표의 의미를 갖도록 해서 추후 클래스의 설명에 적혀있는 이벤트를 처리할때
//	좌표의 값을 이용해서 square에 이벤트를 처리 할 수 있도록 하려고한다.
	private BoardSquare createBoardSquare(int x, int y) {
		boardSquare[y][x] = new BoardSquare();
		boardSquare[y][x].setLayout(new LinearLayout(0));
		boardSquare[y][x].setOpaque(true);
		
		if((x+y)%2==0) {
			boardSquare[y][x].setBackground(Theme.BOARD_DARK_SQUARE_COLOR);
		} else {
			boardSquare[y][x].setBackground(Theme.BOARD_LIGHT_SQUARE_COLOR);
		}
		boardSquare[y][x].setOriginalColor();
		boardSquare[y][x].setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(Component component) {
				boardSquare[y][x].getChessman().setMoveableSquareCoordinate(x, y);
				ArrayList<Coordinate> listTest = boardSquare[y][x].getChessman().getMoveableSquareCoordinate();
//				System.out.println(listTest.size());
				for(Coordinate test : listTest) {
//					System.out.println("("+test.getX()+","+test.getY()+")");
//					System.out.println(test.getY());
					boardSquare[test.getY()][test.getX()].setSquareEventColor();
				}
				boardSquare[y][x].getChessman().refreshMoveableSquareCoordinate();
//				int moveableCount = MoveAbleTest.moveableTest(x, y, boardSquare[y][x].getSquareContains());
//				for(int count = 0; count < moveableCount; count++) {
//					boardSquare[y+count][x].setSquareEventColor();
//				}
//				if(once) {
//					if(tempSquare!=null) {
//						tempSquare.setSquareOriginalColor();
//						System.out.println("0000");
//					}
//					tempSquare = boardSquare[y][x];
//					tempSquare.setSquareEventColor();
//					
//					once = false;
//				} else {
//					System.out.println("2222");
//					tempSquare.setSquareOriginalColor();
//					tempSquare = boardSquare[y][x];
//					tempSquare.setSquareEventColor();
//					
//					once = true;
//				}
			}
		});
		
		return boardSquare[y][x];
	}
	
//	chessman(King, Queen, Bishop, Knight, Rook, Pawn)을 원하는 좌표값(x,y)의 square에 올려준다.
//  올려주는 역할을 BoardSquare class의 메서드를 이용해서 하는데 이를통해 원하는 로직을 따라서 체스말이 추가된다. 
	public void setChessmanOnSquare(Chessman chessman, int x, int y) {
		boardSquare[y][x].setChessmanOnSquare(chessman);
	}
	
	// 모든 체스말을 보드위에 셋팅한다.
	private void setWholeChessmanOnBoard() {
		for (ChessmanType type : ChessmanType.values()) {
			setChessmanOnBoard(type);
		}
	}

	// 체스말의 타입별로 보드의 초기위치에 설정해주기위한 메서드인데 각 타입에 따라 보드위 초기위치에 설정해준다. 
	private void setChessmanOnBoard(ChessmanType type) {
		switch (type) {
		case KING:
			setSingleChessmanOnBoard(ChessmanType.KING);
			break;
		case QUEEN:
			setSingleChessmanOnBoard(ChessmanType.QUEEN);
			break;
		case BISHOP:
			setPairChessmanOnBoard(ChessmanType.BISHOP);
			break;
		case KNIGHT:
			setPairChessmanOnBoard(ChessmanType.KNIGHT);
			break;
		case ROOK:
			setPairChessmanOnBoard(ChessmanType.ROOK);
			break;
		case PAWN:
			setPawnOnBoard(ChessmanType.PAWN);
			break;
		default:
		}
	}
//	초기 갯수가 1개인 말(킹, 퀸) 의 경우 enum의 ordinal이 0, 1인데 여기서 3을 더한 값이 실제 말이 놓일 x로써 의미를 갖게 된다는 것을 알고
//	이러한 규칙을 이용해서 초기 갯수가 1개인 말을 한꺼번에 처리해서 Square에 올려주게되었다.
	private void setSingleChessmanOnBoard(ChessmanType type) {
		setChessmanOnSquare(type.createChessman(true), (type.ordinal()+3), 0);
		setChessmanOnSquare(type.createChessman(false), (type.ordinal()+3), 7);
	}
	
//	초기 갯수가 2개인 말(비숍, 나이트, 룩) 의 경우 enum의 ordinal이 2, 3, 4인데 여기서 3을 더한 값과 7에서 이 값을 뺀 값이
//	실제 말이 놓일 x로써 의미를 갖게 된다는 것을 알고 이러한 규칙을 이용해서 초기 갯수가 2개인 말을 한꺼번에 처리해서 Square에 올려주게되었다.
	private void setPairChessmanOnBoard(ChessmanType type) {
		setChessmanOnSquare(type.createChessman(true), (7-(type.ordinal()+3)), 0);
		setChessmanOnSquare(type.createChessman(true), (type.ordinal()+3), 0);
		setChessmanOnSquare(type.createChessman(false), (7-(type.ordinal()+3)), 7);
		setChessmanOnSquare(type.createChessman(false), (type.ordinal()+3), 7);
	}

//  폰들을 보드위 정해진(초기) 위치에 셋팅해주기위해서 작성하였다. 폰의 경우 초기 갯수만큼 반복해서 생성해서 Square위에 올려주는데
//	흰색과 검정색이 대칭으로 갯수가 똑같음을 이용했다.
	private void setPawnOnBoard(ChessmanType type) {
		int initCount = type.getInitCount();
		for (int count = 0; count < initCount; count++) {
			setChessmanOnSquare(type.createChessman(true), count, 1);
			setChessmanOnSquare(type.createChessman(false), count, 6);
		}
	}
}

class MoveAbleTest {
	private MoveAbleTest() {	}
	
	static int moveableTest(int x, int y, Chessman chessman) {
		if( chessman instanceof Pawn) {
			return 2;
		}
		return 0;
	}
}
